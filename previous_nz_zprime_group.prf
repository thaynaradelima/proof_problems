(|nz_zprime_group|
 (|prime_nat| 0
  (|prime_nat-1| NIL 3932713073 ("" (JUDGEMENT-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|x!1| SKOLEM-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|prime_nat| SUBTYPE "nz_zprime_group.x" "posnat")))
 (|nz_coset_zsq_TCC1| 0
  (|nz_coset_zsq_TCC1-2| NIL 3932721297
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (SKEEP)
      (("" (REWRITE "lcoset_iff_coset" :DIR RL)
        (("" (EXPAND "left_coset?")
          (("" (INST 1 "0")
            (("1" (REWRITE "left_zero") NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   NIL
   (|nz_coset_zsq| SUBTYPE "ring_zn.nZ(nz_zprime_group.p)"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))"))
  (|nz_coset_zsq_TCC1-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|nz_coset_zsq| SUBTYPE "ring_zn.nZ(nz_zprime_group.p)"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))")))
 (|one_dif_zero_cos| 0
  (|one_dif_zero_cos-2| NIL 3932721913
   ("" (PROP)
    (("" (LEMMA "equal_cosets_div")
      (("" (INST -1 "0" "1" "p")
        (("" (REWRITE "left_zero")
          (("" (ASSERT)
            (("" (REWRITE "one_div_one")
              (("" (TYPEPRED "p") (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|one_div_one| FORMULA-DECL NIL |divides| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|))
   NIL)
  (|one_dif_zero_cos-1| NIL 3932721893 ("" (POSTPONE) NIL NIL) NIL SHOSTAK))
 (|Zp_nz_is_group_TCC1| 0
  (|Zp_nz_is_group_TCC1-2| NIL 3932721342
   ("" (INST 1 "+(1, nZ(p))")
    (("" (REWRITE "lcoset_iff_coset" :DIR RL)
      (("" (EXPAND "left_coset?")
        (("" (PROP)
          (("1" (INST 1 "1")
            (("1"
              (STOP-REWRITE "right_identity" "left_identity" "one_left"
               "one_right" "zero_plus" "plus_zero")
              (("1" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (LEMMA "one_dif_zero_cos") (("2" (PROP) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|one_dif_zero_cos| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|))
   NIL (|Zp_nz_is_group| EXISTENCE "" "nz_coset(nz_zprime_group.p)"))
  (|Zp_nz_is_group_TCC1-1| NIL 3932713073 ("" (EXISTENCE-TCC) NIL NIL) NIL NIL
   (|Zp_nz_is_group| EXISTENCE "" "nz_coset(nz_zprime_group.p)")))
 (|Zp_nz_is_group_TCC2| 0
  (|Zp_nz_is_group_TCC2-2| NIL 3932721388
   ("" (SKEEP)
    ((""
      (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
       "zero_plus" "plus_zero")
      (("" (SPLIT)
        (("1" (LEMMA "coset_product")
          (("1" (INST -1 "Z" "nZ(p)" "x1`1" "x1`2")
            (("1" (ASSERT) NIL NIL)
             ("2" (HIDE 2) (("2" (REWRITE "nZ_ideal") NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "x1`1" "x1`2")
          (("2" (LEMMA "Zp_prime_is_nz_closed")
            (("2" (INST -1 "p")
              (("2" (ASSERT)
                (("2" (EXPAND "nz_closed?")
                  (("2" (EXPAND "star_closed?")
                    (("2" (INST -1 "x1`1" "x1`2")
                      (("1" (EXPAND "member")
                        (("1" (EXPAND "remove") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-4 1))
                        (("2" (EXPAND "remove")
                          (("2" (EXPAND "member")
                            (("2" (EXPAND "restrict")
                              (("2" (EXPAND "Z")
                                (("2" (EXPAND "/") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE-ALL-BUT (-3 1))
                        (("3" (EXPAND "remove")
                          (("3" (EXPAND "member")
                            (("3" (EXPAND "restrict")
                              (("3" (EXPAND "Z")
                                (("3" (EXPAND "/") (("3" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|coset_product| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Zp_prime_is_nz_closed| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|x1| SKOLEM-CONST-DECL "[nz_coset(p), nz_coset(p)]" |nz_zprime_group| NIL)
    (|nz_closed?| CONST-DECL "bool" |ring_nz_closed_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL
   (|Zp_nz_is_group| SUBTYPE
    "restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)))"
    "[[nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)] -> nz_coset(nz_zprime_group.p)]"))
  (|Zp_nz_is_group_TCC2-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Zp_nz_is_group| SUBTYPE
    "restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)))"
    "[[nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)] -> nz_coset(nz_zprime_group.p)]")))
 (|Zp_nz_is_group_TCC3| 0
  (|Zp_nz_is_group_TCC3-2| NIL 3932721444
   ("" (REWRITE "lcoset_iff_coset" :DIR RL)
    (("" (EXPAND "left_coset?")
      (("" (SPLIT)
        (("1" (INST 1 "1")
          (("1" (EXPAND "Z")
            (("1" (EXPAND "fullset") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (LEMMA "one_dif_zero_cos") (("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|one_dif_zero_cos| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|))
   NIL
   (|Zp_nz_is_group| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p))"
    "nz_coset(nz_zprime_group.p)"))
  (|Zp_nz_is_group_TCC3-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Zp_nz_is_group| SUBTYPE
    "(cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p))"
    "nz_coset(nz_zprime_group.p)")))
 (|Zp_nz_is_group| 0
  (|Zp_nz_is_group-1| NIL 3932721947
   ("" (LEMMA "Zp_prime_is_field")
    (("" (INST?)
      (("" (ASSERT)
        (("" (EXPAND "field?")
          (("" (EXPAND "division_ring?")
            (("" (FLATTEN)
              (("" (HIDE -1 -3)
                (("" (EXPAND "group?")
                  (("" (EXPAND "monoid?")
                    (("" (EXPAND "monad?")
                      (("" (EXPAND "star_closed?")
                        (("" (FLATTEN)
                          (("" (SPLIT)
                            (("1" (HIDE-ALL-BUT (-1 1))
                              (("1" (SKEEP)
                                (("1" (EXPAND "member")
                                  (("1" (EXPAND "restrict")
                                    (("1" (EXPAND "remove")
                                      (("1" (INST?)
                                        (("1" (EXPAND "member")
                                          (("1" (PROPAX) NIL NIL)) NIL)
                                         ("2" (EXPAND "remove")
                                          (("2" (EXPAND "member")
                                            (("2" (EXPAND "restrict")
                                              (("2" (EXPAND "Z")
                                                (("2" (EXPAND "/")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (EXPAND "remove")
                                          (("3" (EXPAND "member")
                                            (("3" (EXPAND "restrict")
                                              (("3" (EXPAND "Z")
                                                (("3" (EXPAND "/")
                                                  (("3" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-2 1))
                              (("2" (EXPAND "member")
                                (("2" (EXPAND "restrict")
                                  (("2" (EXPAND "remove")
                                    (("2" (EXPAND "member")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (HIDE-ALL-BUT (-3 1))
                              (("3" (EXPAND "identity?")
                                (("3" (EXPAND "restrict")
                                  (("3" (SKEEP)
                                    (("3" (INST?)
                                      (("3" (EXPAND "remove")
                                        (("3" (EXPAND "member")
                                          (("3" (EXPAND "restrict")
                                            (("3" (EXPAND "Z")
                                              (("3" (EXPAND "/")
                                                (("3" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("4" (HIDE-ALL-BUT (-4 1))
                              (("4" (EXPAND "associative?")
                                (("4" (EXPAND "restrict")
                                  (("4" (SKEEP)
                                    (("4" (INST?)
                                      (("1" (EXPAND "remove")
                                        (("1" (EXPAND "member")
                                          (("1" (EXPAND "restrict")
                                            (("1" (EXPAND "Z")
                                              (("1" (EXPAND "/")
                                                (("1" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "remove")
                                        (("2" (EXPAND "member")
                                          (("2" (EXPAND "restrict")
                                            (("2" (EXPAND "Z")
                                              (("2" (EXPAND "/")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (EXPAND "remove")
                                        (("3" (EXPAND "member")
                                          (("3" (EXPAND "restrict")
                                            (("3" (EXPAND "Z")
                                              (("3" (EXPAND "/")
                                                (("3" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("5" (HIDE-ALL-BUT (-5 1))
                              (("5" (EXPAND "inv_exists?")
                                (("5" (SKEEP)
                                  (("5" (INST -1 "x")
                                    (("1" (SKEEP)
                                      (("1" (INST?)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "restrict")
                                            (("2" (EXPAND "remove")
                                              (("2" (EXPAND "member")
                                                (("2" (TYPEPRED "y")
                                                  (("2" (EXPAND "Z")
                                                    (("2" (EXPAND "/")
                                                      (("2" (HIDE -1)
                                                        (("2" (EXPAND "remove")
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "remove")
                                      (("2" (EXPAND "member")
                                        (("2" (EXPAND "restrict")
                                          (("2" (EXPAND "Z")
                                            (("2" (EXPAND "/")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Zp_prime_is_field| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| |algebra|)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|y| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|z| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|y| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|x| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|y| SKOLEM-CONST-DECL "(remove
     [coset[int,
            restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                     nZ(p))]
     (nZ(p),
      restrict
          [setof[int],
           coset[int,
                 restrict[[numfield, numfield], [int, int], numfield]
                     (+)](Z, nZ(p)),
           bool]
          (Z(p))))"
     |nz_zprime_group| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|field?| CONST-DECL "bool" |field_def| |algebra|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL))
 (|Zsq_nz_is_group_TCC1| 0
  (|Zsq_nz_is_group_TCC1-2| NIL 3932721476
   ("" (REWRITE "ideal_is_coset")
    (("" (HIDE 2) (("" (REWRITE "nZ_ideal") NIL NIL)) NIL)) NIL)
   ((|ideal_is_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|))
   NIL
   (|Zsq_nz_is_group| SUBTYPE "ring_zn.nZ(nz_zprime_group.p)"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))"))
  (|Zsq_nz_is_group_TCC1-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|Zsq_nz_is_group| SUBTYPE "ring_zn.nZ(nz_zprime_group.p)"
    "coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))")))
 (|Zsq_nz_is_group| 0
  (|Zsq_nz_is_group-1| NIL 3932721999
   ("" (CASE "p >= 0")
    (("1" (LEMMA "nZ_ideal")
      (("1" (INST?)
        (("1" (EXPAND "group?")
          (("1" (PROP)
            (("1" (EXPAND "monoid?")
              (("1" (PROP)
                (("1" (EXPAND "monad?")
                  (("1" (PROP)
                    (("1" (EXPAND "star_closed?")
                      (("1" (SKEEP)
                        (("1" (EXPAND "member")
                          (("1" (EXPAND "restrict")
                            (("1" (EXPAND "remove")
                              (("1" (PROP)
                                (("1" (TYPEPRED "x" "y")
                                  (("1" (HIDE (-3 -6))
                                    (("1" (EXPAND* "coset?" "remove")
                                      (("1" (PROP)
                                        (("1" (HIDE (-2 -4))
                                          (("1" (EXPAND "left_coset?")
                                            (("1" (SKEEP*)
                                              (("1" (REPLACES -1)
                                                (("1" (REPLACES -1)
                                                  (("1"
                                                    (REWRITE "product_charac")
                                                    (("1" (LEMMA "self_coset")
                                                      (("1"
                                                        (INST -1 "nZ(p)" "Z"
                                                         "a * a!1")
                                                        (("1" (PROP)
                                                          (("1" (HIDE (-1 -3))
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (EXPAND "nZ"
                                                                        -1)
                                                                (("1" (SKEEP)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "prime_divides_prod")
                                                                    (("1"
                                                                      (INST -1
                                                                       "p")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "a"
                                                                           "a!1")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "divides")
                                                                            (("1"
                                                                              (PROP)
                                                                              (("1"
                                                                                (SKEEP)
                                                                                (("1"
                                                                                  (HIDE
                                                                                   (-2
                                                                                    2))
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "self_coset")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "nZ(p)"
                                                                                       "Z"
                                                                                       "a")
                                                                                      (("1"
                                                                                        (PROP)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             (2
                                                                                              3))
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nZ"
                                                                                               1)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           (-1
                                                                                            -3
                                                                                            2))
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "ideal?")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "left_ideal?")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (SKEEP)
                                                                                (("2"
                                                                                  (HIDE
                                                                                   (-2
                                                                                    1))
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "self_coset")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "nZ(p)"
                                                                                       "Z"
                                                                                       "a!1")
                                                                                      (("2"
                                                                                        (PROP)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             (2
                                                                                              3))
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nZ"
                                                                                               1)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (HIDE
                                                                                           (-1
                                                                                            -3
                                                                                            2))
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "ideal?")
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "left_ideal?")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (HIDE
                                                                                 (-2
                                                                                  -3
                                                                                  2
                                                                                  3))
                                                                                (("3"
                                                                                  (INST
                                                                                   1
                                                                                   "k")
                                                                                  (("3"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE (2 3 4))
                                                            (("2"
                                                              (EXPAND "member")
                                                              (("2"
                                                                (LEMMA
                                                                 "self_coset")
                                                                (("2"
                                                                  (INST -1
                                                                   "nZ(p)" "Z"
                                                                   "a * a!1")
                                                                  (("2" (PROP)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("3"
                                                                      (HIDE
                                                                       (-1 -3
                                                                        2))
                                                                      (("3"
                                                                        (EXPAND
                                                                         "ideal?")
                                                                        (("3"
                                                                          (EXPAND
                                                                           "left_ideal?")
                                                                          (("3"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("3"
                                                            (HIDE (-1 -3 2 3))
                                                            (("3"
                                                              (EXPAND "ideal?")
                                                              (("3"
                                                                (EXPAND
                                                                 "left_ideal?")
                                                                (("3" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "member")
                                  (("2" (TYPEPRED "x" "y")
                                    (("2" (HIDE (-1 -4))
                                      (("2" (EXPAND "restrict")
                                        (("2" (EXPAND "remove")
                                          (("2" (FLATTEN)
                                            (("2" (EXPAND "member")
                                              (("2" (HIDE (1 2))
                                                (("2" (EXPAND "Z_sq")
                                                  (("2" (SKEEP*)
                                                    (("2" (INST 1 "a * a!1")
                                                      (("2" (REPLACES -1)
                                                        (("2" (REPLACES -1)
                                                          (("2"
                                                            (REWRITE
                                                             "product_charac")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (HIDE (- 2))
                                                              (("2"
                                                                (EXPAND "Z")
                                                                (("2"
                                                                  (EXPAND
                                                                   "fullset")
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3" (HIDE (- 2))
                                                              (("3"
                                                                (EXPAND "Z")
                                                                (("3"
                                                                  (EXPAND
                                                                   "fullset")
                                                                  (("3"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "member")
                      (("2" (EXPAND "restrict")
                        (("2" (EXPAND "remove")
                          (("2" (EXPAND "member")
                            (("2" (LEMMA "one_dif_zero_cos")
                              (("2" (ASSERT)
                                (("2" (EXPAND "Z_sq")
                                  (("2" (INST 1 "1") (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "identity?")
                      (("3" (EXPAND "restrict")
                        (("3" (SKEEP)
                          (("3" (TYPEPRED "x")
                            (("3" (EXPAND "coset?")
                              (("3" (FLATTEN)
                                (("3" (HIDE (-2 -3 -4))
                                  (("3" (EXPAND "left_coset?")
                                    (("3" (SKEEP)
                                      (("3" (REPLACES -1)
                                        (("3" (REWRITE* "product_charac")
                                          (("1" (EXPAND "Z")
                                            (("1" (EXPAND "fullset")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (REWRITE "nZ_ideal") NIL NIL)
                                           ("3" (EXPAND "Z")
                                            (("3" (EXPAND "fullset")
                                              (("3" (PROPAX) NIL NIL)) NIL))
                                            NIL)
                                           ("4" (REWRITE "nZ_ideal") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "associative?")
                  (("2" (EXPAND "restrict")
                    (("2" (SKEEP)
                      (("2" (TYPEPRED "x" "y" "z")
                        (("2" (EXPAND "coset?")
                          (("2" (FLATTEN)
                            (("2" (HIDE (-2 -3 -5 -6 -8 -9))
                              (("2" (EXPAND "left_coset?")
                                (("2" (SKEEP*)
                                  (("2" (REPLACES -1)
                                    (("2" (REPLACES -1)
                                      (("2" (REPLACES -1)
                                        (("2" (REWRITE* "product_charac")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (GRIND) NIL NIL)) NIL)
                                           ("3" (HIDE-ALL-BUT 1)
                                            (("3" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "inv_exists?")
              (("2" (SKEEP)
                (("2" (TYPEPRED "x")
                  (("2" (EXPAND "restrict")
                    (("2" (EXPAND "remove")
                      (("2" (FLATTEN)
                        (("2" (EXPAND "member")
                          (("2" (EXPAND "Z_sq")
                            (("2" (SKEEP)
                              (("2" (LEMMA "Zp_prime_is_division_ring")
                                (("2" (INST -1 "p")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "division_ring?")
                                      (("2" (EXPAND "group?")
                                        (("2" (FLATTEN)
                                          (("2" (HIDE (-1 -2))
                                            (("2" (EXPAND "inv_exists?")
                                              (("2" (INST -1 " a + nZ(p)")
                                                (("1" (SKEEP)
                                                  (("1" (TYPEPRED "y")
                                                    (("1" (EXPAND "coset?")
                                                      (("1" (FLATTEN)
                                                        (("1" (HIDE (-2 -3))
                                                          (("1"
                                                            (EXPAND
                                                             "left_coset?")
                                                            (("1" (SKEEP)
                                                              (("1" (SKEEP)
                                                                (("1"
                                                                  (REPLACES -4)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             (-2
                                                                              -3))
                                                                    (("1"
                                                                      (HIDE -1)
                                                                      (("1"
                                                                        (INST 2
                                                                         "a!1 * a!1 + nZ(p)")
                                                                        (("1"
                                                                          (REPLACES
                                                                           -4)
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (REWRITE
                                                                               "product_charac"
                                                                               -1)
                                                                              (("1"
                                                                                (CASE-REPLACE
                                                                                 "product(Z, nZ(p))((a * a + nZ(p)), a!1 * a!1 + nZ(p)) = product(Z, nZ(p))((a * a!1 + nZ(p)), a * a!1 + nZ(p))")
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "product_charac"
                                                                                     1)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   2)
                                                                                  (("2"
                                                                                    (REWRITE*
                                                                                     "product_charac")
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("2"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("3"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (REWRITE
                                                                                   "lcoset_iff_coset"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("3"
                                                                                    (EXPAND
                                                                                     "left_coset?")
                                                                                    (("3"
                                                                                      (INST
                                                                                       1
                                                                                       "a*a!1")
                                                                                      (("3"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("3"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE-ALL-BUT
                                                                                 1)
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (REWRITE
                                                                               "product_charac"
                                                                               -2)
                                                                              (("1"
                                                                                (CASE-REPLACE
                                                                                 "product(Z, nZ(p))((a!1 * a!1 + nZ(p)), a * a + nZ(p)) = product(Z, nZ(p))((a!1 * a + nZ(p)), a!1 * a + nZ(p))")
                                                                                (("1"
                                                                                  (REPLACES
                                                                                   -3)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "product_charac"
                                                                                     1)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE
                                                                                   -1
                                                                                   2)
                                                                                  (("2"
                                                                                    (REWRITE*
                                                                                     "product_charac")
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("1"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("2"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (HIDE-ALL-BUT
                                                                                       1)
                                                                                      (("3"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (REWRITE
                                                                                   "lcoset_iff_coset"
                                                                                   :DIR
                                                                                   RL)
                                                                                  (("3"
                                                                                    (EXPAND
                                                                                     "left_coset?")
                                                                                    (("3"
                                                                                      (INST
                                                                                       1
                                                                                       "a!1*a")
                                                                                      (("3"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("3"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE-ALL-BUT
                                                                                 1)
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "restrict")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "remove")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "member")
                                                                              (("2"
                                                                                (REVEAL
                                                                                 -1
                                                                                 -4)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "remove")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "member")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "restrict")
                                                                                      (("2"
                                                                                        (REPLACES
                                                                                         -1)
                                                                                        (("2"
                                                                                          (FLATTEN)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5)
                                                                                            (("2"
                                                                                              (SPLIT)
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "lcoset_iff_coset"
                                                                                                 :DIR
                                                                                                 RL)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "left_coset?")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     1
                                                                                                     "a!1 * a!1")
                                                                                                    (("1"
                                                                                                      (HIDE-ALL-BUT
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (LEMMA
                                                                                                 "Zp_prime_is_nz_closed")
                                                                                                (("2"
                                                                                                  (INST?)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "nz_closed?")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "star_closed?")
                                                                                                        (("2"
                                                                                                          (INST
                                                                                                           -1
                                                                                                           "a!1+nZ(p)"
                                                                                                           "a!1+nZ(p)")
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "member")
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "remove")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "member")
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "restrict")
                                                                                                                  (("1"
                                                                                                                    (FLATTEN)
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "product_charac"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (ASSERT)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (EXPAND
                                                                                                             "remove")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "restrict")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "Z"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "/"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (PROPAX)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("3"
                                                                                                (PROP)
                                                                                                (("3"
                                                                                                  (LEMMA
                                                                                                   "Zp_prime_is_nz_closed")
                                                                                                  (("3"
                                                                                                    (INST?)
                                                                                                    (("3"
                                                                                                      (ASSERT)
                                                                                                      (("3"
                                                                                                        (EXPAND
                                                                                                         "nz_closed?")
                                                                                                        (("3"
                                                                                                          (EXPAND
                                                                                                           "star_closed?")
                                                                                                          (("3"
                                                                                                            (EXPAND
                                                                                                             "member")
                                                                                                            (("3"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "a!1+nZ(p)"
                                                                                                               "a!1+nZ(p)")
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "remove")
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "member")
                                                                                                                  (("1"
                                                                                                                    (FLATTEN)
                                                                                                                    (("1"
                                                                                                                      (REWRITE
                                                                                                                       "product_charac"
                                                                                                                       1)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL)
                                                                                                               ("2"
                                                                                                                (EXPAND
                                                                                                                 "remove")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "member")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "restrict")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "Z"
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "/")
                                                                                                                        (("2"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("4"
                                                                                                (EXPAND
                                                                                                 "Z_sq")
                                                                                                (("4"
                                                                                                  (INST
                                                                                                   1
                                                                                                   "a!1")
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "remove")
                                                  (("2" (EXPAND "member")
                                                    (("2" (EXPAND "restrict")
                                                      (("2" (EXPAND "Z" 1 2)
                                                        (("2" (EXPAND "/")
                                                          (("2"
                                                            (CASE
                                                                " coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
          (Z, nZ(p))
          ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
               (a, nZ(p)))")
                                                            (("1" (ASSERT)
                                                              (("1" (PROP)
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "(a * a + nZ(p)) =  product(Z, nZ(p))(a+nZ(p), a+nZ(p))")
                                                                  (("1"
                                                                    (REPLACE -3
                                                                             -5
                                                                             RL)
                                                                    (("1"
                                                                      (CASE-REPLACE
                                                                       " product(Z, nZ(p))(nZ(p), nZ(p)) = nZ(p)")
                                                                      (("1"
                                                                        (HIDE-ALL-BUT
                                                                         (-6
                                                                          1))
                                                                        (("1"
                                                                          (LEMMA
                                                                           "product_charac")
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "Z"
                                                                             "nZ(p)"
                                                                             "0"
                                                                             "0")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REWRITE*
                                                                                 "left_zero")
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE-ALL-BUT
                                                                               1)
                                                                              (("2"
                                                                                (GRIND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REWRITE
                                                                     "product_charac")
                                                                    (("2"
                                                                      (HIDE-ALL-BUT
                                                                       1)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (HIDE-ALL-BUT
                                                               (1 -3))
                                                              (("2"
                                                                (REWRITE
                                                                 "lcoset_iff_coset"
                                                                 :DIR RL)
                                                                (("2"
                                                                  (EXPAND
                                                                   "left_coset?")
                                                                  (("2"
                                                                    (INST 1
                                                                     "a")
                                                                    (("2"
                                                                      (HIDE -1)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3"
                                                              (HIDE-ALL-BUT 1)
                                                              (("3" (SKEEP)
                                                                (("3"
                                                                  (STOP-REWRITE
                                                                   "right_identity"
                                                                   "left_identity"
                                                                   "one_left"
                                                                   "one_right"
                                                                   "zero_plus"
                                                                   "plus_zero")
                                                                  (("3" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2) (("2" (TYPEPRED "p") (("2" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|left_ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|self_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (|Z_sq| CONST-DECL
     "set[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                        nZ(p))]"
     |nz_zprime_group| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|one_dif_zero_cos| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|one_times| FORMULA-DECL NIL |ring_with_one| |algebra|)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|Zp_prime_is_division_ring| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|a| SKOLEM-CONST-DECL "int" |nz_zprime_group| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|a!1| SKOLEM-CONST-DECL "(Z)" |nz_zprime_group| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|Zp_prime_is_nz_closed| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|nz_closed?| CONST-DECL "bool" |ring_nz_closed_def| |algebra|)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|division_ring?| CONST-DECL "bool" |division_ring_def| |algebra|)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|IMP_homomorphisms_TCC1| 0
  (|IMP_homomorphisms_TCC1-2| NIL 3932721557
   ("" (LEMMA "Zp_nz_is_group")
    (("" (EXPAND "group?")
      (("" (EXPAND "monoid?")
        (("" (EXPAND "monad?")
          (("" (EXPAND "star_closed?")
            (("" (FLATTEN)
              (("" (SPLIT)
                (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)
                 ("3" (HIDE-ALL-BUT (-3 1))
                  (("3" (EXPAND "identity?")
                    (("3" (EXPAND "restrict")
                      (("3" (SKEEP)
                        (("3" (INST?)
                          (("3" (EXPAND "restrict")
                            (("3" (EXPAND "remove")
                              (("3" (EXPAND "member")
                                (("3" (TYPEPRED "x")
                                  (("3" (EXPAND "Z")
                                    (("3" (EXPAND "Z")
                                      (("3" (EXPAND "/")
                                        (("3" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (HIDE-ALL-BUT (-4 1))
                  (("4" (EXPAND "associative?")
                    (("4" (EXPAND "restrict")
                      (("4" (SKEEP)
                        (("4" (INST?)
                          (("1" (HIDE 2)
                            (("1" (EXPAND "restrict")
                              (("1" (EXPAND "remove")
                                (("1" (EXPAND "member")
                                  (("1" (EXPAND "Z")
                                    (("1" (EXPAND "/") (("1" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE 2)
                            (("2" (EXPAND "restrict")
                              (("2" (EXPAND "remove")
                                (("2" (EXPAND "member")
                                  (("2" (EXPAND "Z")
                                    (("2" (EXPAND "/") (("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (EXPAND "restrict")
                              (("3" (EXPAND "remove")
                                (("3" (EXPAND "member")
                                  (("3" (EXPAND "Z")
                                    (("3" (EXPAND "/") (("3" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("5" (HIDE-ALL-BUT (-5 1))
                  (("5" (EXPAND "inv_exists?")
                    (("5" (SKEEP)
                      (("5" (INST -1 "x")
                        (("1" (SKEEP)
                          (("1" (INST 1 "y")
                            (("1" (ASSERT) NIL NIL)
                             ("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (EXPAND "restrict")
                            (("2" (EXPAND "remove")
                              (("2" (EXPAND "member")
                                (("2" (EXPAND "Z")
                                  (("2" (EXPAND "/") (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Zp_nz_is_group| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|lc_gen| CONST-DECL "T" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|lproduct| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|identity?| CONST-DECL "bool" |operator_defs| NIL)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|x| SKOLEM-CONST-DECL "(fullset[nz_coset(p)])" |nz_zprime_group| NIL)
    (|associative?| CONST-DECL "bool" |operator_defs| NIL)
    (|x| SKOLEM-CONST-DECL "(fullset[nz_coset(p)])" |nz_zprime_group| NIL)
    (|y| SKOLEM-CONST-DECL "(fullset[nz_coset(p)])" |nz_zprime_group| NIL)
    (|z| SKOLEM-CONST-DECL "(fullset[nz_coset(p)])" |nz_zprime_group| NIL)
    (|inv_exists?| CONST-DECL "bool" |group_def| |algebra|)
    (|x| SKOLEM-CONST-DECL "(fullset[nz_coset(p)])" |nz_zprime_group| NIL)
    (|y| SKOLEM-CONST-DECL
     "(restrict[set[int], nz_coset(p), bool](remove(nZ(p), Z(p))))"
     |nz_zprime_group| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|))
   NIL
   (|IMP_homomorphisms| ASSUMING
    "algebra@homomorphisms[nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p))].homomorphisms"
    "T1_is_group: ASSUMPTION group_def[homomorphisms.T1, homomorphisms.*, homomorphisms.one1].group?(sets[homomorphisms.T1].fullset)"))
  (|IMP_homomorphisms_TCC1-1| NIL 3932713073 ("" (ASSUMING-TCC) NIL NIL) NIL
   NIL
   (|IMP_homomorphisms| ASSUMING
    "algebra@homomorphisms[nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p))].homomorphisms"
    "T1_is_group: ASSUMPTION group_def[homomorphisms.T1, homomorphisms.*, homomorphisms.one1].group?(sets[homomorphisms.T1].fullset)")))
 (|surj_homo_Zp_Zpsq_TCC1| 0
  (|surj_homo_Zp_Zpsq_TCC1-2| NIL 3932721611
   ("" (SKEEP)
    (("" (EXPAND "remove")
      (("" (EXPAND "member")
        (("" (TYPEPRED "x")
          (("" (REWRITE* "lcoset_iff_coset" :DIR RL)
            (("" (EXPAND "left_coset?")
              (("" (SKEEP)
                (("" (SPLIT)
                  (("1" (INST 1 "a * a")
                    (("1" (REPLACES -1 1)
                      (("1" (REWRITE "product_charac")
                        (("1" (HIDE 2) (("1" (REWRITE "nZ_ideal") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL))
                    NIL)
                   ("2" (LEMMA "Zp_prime_is_nz_closed")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "nz_closed?")
                          (("2" (EXPAND "star_closed?")
                            (("2" (INST?)
                              (("1" (EXPAND "member")
                                (("1" (EXPAND "remove")
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL)
                               ("2" (EXPAND "remove")
                                (("2" (EXPAND "member")
                                  (("2" (EXPAND "restrict")
                                    (("2" (EXPAND "Z")
                                      (("2" (EXPAND "/")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "Z_sq")
                    (("3" (REPLACES -1 1)
                      (("3" (INST 1 "a")
                        (("3" (REWRITE "product_charac")
                          (("3" (REWRITE "nZ_ideal") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Z_sq| CONST-DECL
     "set[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                        nZ(p))]"
     |nz_zprime_group| NIL)
    (|Zp_prime_is_nz_closed| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|x| SKOLEM-CONST-DECL "nz_coset(p)" |nz_zprime_group| NIL)
    (|nz_closed?| CONST-DECL "bool" |ring_nz_closed_def| |algebra|)
    (|a| SKOLEM-CONST-DECL "(Z)" |nz_zprime_group| NIL)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|remove| CONST-DECL "set" |sets| NIL))
   NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))(nz_zprime_group.x, nz_zprime_group.x)"
    "nz_coset_zsq(nz_zprime_group.p)"))
  (|surj_homo_Zp_Zpsq_TCC1-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))(nz_zprime_group.x, nz_zprime_group.x)"
    "nz_coset_zsq(nz_zprime_group.p)")))
 (|surj_homo_Zp_Zpsq_TCC2| 0
  (|surj_homo_Zp_Zpsq_TCC2-2| NIL 3932721652
   ("" (SKEEP) (("" (LEMMA "Zp_nz_is_group") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|Zp_nz_is_group| FORMULA-DECL NIL |nz_zprime_group| NIL)) NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p)))"
    "group[nz_coset(p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p)), coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p))], [nz_coset(p), nz_coset(p)], set[int]](product[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*)](Z, nZ(p))), (+[int, restrict[[numfield, numfield], [int, int], numfield](+)])(1, nZ(p))]"))
  (|surj_homo_Zp_Zpsq_TCC2-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p)))"
    "group[nz_coset(p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p)), coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p))], [nz_coset(p), nz_coset(p)], set[int]](product[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*)](Z, nZ(p))), (+[int, restrict[[numfield, numfield], [int, int], numfield](+)])(1, nZ(p))]")))
 (|surj_homo_Zp_Zpsq_TCC3| 0
  (|surj_homo_Zp_Zpsq_TCC3-2| NIL 3932721680
   ("" (SKEEP) (("" (LEMMA "Zsq_nz_is_group") (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|Zsq_nz_is_group| FORMULA-DECL NIL |nz_zprime_group| NIL)) NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "restrict[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), bool].restrict(sets[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))].remove(ring_zn.nZ(nz_zprime_group.p), nz_zprime_group.Z_sq(nz_zprime_group.p)))"
    "group[nz_coset(p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p)), coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p))], [nz_coset(p), nz_coset(p)], set[int]](product[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*)](Z, nZ(p))), (+[int, restrict[[numfield, numfield], [int, int], numfield](+)])(1, nZ(p))]"))
  (|surj_homo_Zp_Zpsq_TCC3-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "restrict[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), bool].restrict(sets[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))].remove(ring_zn.nZ(nz_zprime_group.p), nz_zprime_group.Z_sq(nz_zprime_group.p)))"
    "group[nz_coset(p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p)), coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z, nZ(p))], [nz_coset(p), nz_coset(p)], set[int]](product[int, restrict[[numfield, numfield], [int, int], numfield](+), restrict[[numfield, numfield], [int, int], numfield](*)](Z, nZ(p))), (+[int, restrict[[numfield, numfield], [int, int], numfield](+)])(1, nZ(p))]")))
 (|surj_homo_Zp_Zpsq_TCC4| 0
  (|surj_homo_Zp_Zpsq_TCC4-2| NIL 3932721711
   ("" (SKEEP*)
    (("" (EXPAND "restrict")
      (("" (TYPEPRED "x1")
        (("" (PROP)
          (("" (EXPAND "coset?")
            (("" (FLATTEN)
              (("" (HIDE -2)
                (("" (EXPAND "left_coset?")
                  (("" (SKEEP)
                    (("" (CASE-REPLACE "phi(x1) = a * a + nZ(p)")
                      (("1" (CASE "divides(p, a* a)")
                        (("1" (LEMMA "prime_divides_prod")
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (PROP)
                                    (("1" (HIDE-ALL-BUT (-1 -4 1))
                                      (("1" (LEMMA "equal_cosets_div")
                                        (("1" (INST -1 "a" "0" "p")
                                          (("1" (LEMMA "divides_opposite")
                                            (("1" (INST -1 "a" "p")
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "left_zero")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE-ALL-BUT (-1 -4 1))
                                      (("2" (LEMMA "equal_cosets_div")
                                        (("2" (INST -1 "a" "0" "p")
                                          (("2" (LEMMA "divides_opposite")
                                            (("2" (INST -1 "a" "p")
                                              (("2" (ASSERT)
                                                (("2" (REWRITE "left_zero")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT (-5 1))
                          (("2" (LEMMA "equal_cosets_div")
                            (("2" (INST -1 "0" "a* a" "p")
                              (("2" (REWRITE "left_zero")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REPLACE -3 1)
                        (("2" (BETA)
                          (("2" (REPLACES -1)
                            (("2" (REWRITE "product_charac")
                              (("2" (REWRITE "nZ_ideal") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|divides_opposite| FORMULA-DECL NIL |divides| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nz_coset_zsq| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (|Z_sq| CONST-DECL
     "set[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                        nZ(p))]"
     |nz_zprime_group| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "restrict[nz_coset(nz_zprime_group.p), (restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p)))), nz_coset_zsq(nz_zprime_group.p)].restrict(nz_zprime_group.phi)"
    "[(restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p)))) -> (restrict[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), bool].restrict(sets[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))].remove(ring_zn.nZ(nz_zprime_group.p), nz_zprime_group.Z_sq(nz_zprime_group.p))))]"))
  (|surj_homo_Zp_Zpsq_TCC4-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|surj_homo_Zp_Zpsq| SUBTYPE
    "restrict[nz_coset(nz_zprime_group.p), (restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p)))), nz_coset_zsq(nz_zprime_group.p)].restrict(nz_zprime_group.phi)"
    "[(restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p)))) -> (restrict[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), bool].restrict(sets[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))].remove(ring_zn.nZ(nz_zprime_group.p), nz_zprime_group.Z_sq(nz_zprime_group.p))))]")))
 (|surj_homo_Zp_Zpsq| 0
  (|surj_homo_Zp_Zpsq-1| NIL 3932722119
   ("" (BETA)
    (("" (EXPAND "homomorphism?")
      (("" (EXPAND "restrict")
        (("" (LEMMA "prime_gt_1")
          (("" (INST?)
            (("" (ASSERT)
              (("" (LEMMA "nZ_ideal")
                (("" (INST?)
                  (("" (SPLIT)
                    (("1" (SKEEP)
                      (("1" (TYPEPRED "a" "b")
                        (("1" (HIDE (-3 -6))
                          (("1" (EXPAND "coset?")
                            (("1" (EXPAND "left_coset?")
                              (("1" (FLATTEN)
                                (("1" (HIDE (-2 -4))
                                  (("1" (SKEEP*)
                                    (("1" (REPLACES -1)
                                      (("1" (REPLACES -1)
                                        (("1" (REWRITE* "product_charac")
                                          (("1" (HIDE-ALL-BUT 1)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (HIDE-ALL-BUT 1)
                                            (("2" (GRIND) NIL NIL)) NIL)
                                           ("3" (HIDE-ALL-BUT 1)
                                            (("3" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "surjective?")
                      (("2" (SKEEP)
                        (("2" (TYPEPRED "y")
                          (("2" (HIDE -1)
                            (("2" (EXPAND "remove")
                              (("2" (FLATTEN)
                                (("2" (EXPAND "member")
                                  (("2" (EXPAND "Z_sq")
                                    (("2" (SKEEP)
                                      (("2" (INST 2 "a + nZ(p)")
                                        (("1" (REPLACES -1)
                                          (("1" (REWRITE "product_charac")
                                            (("1" (HIDE-ALL-BUT 1)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SPLIT)
                                          (("1"
                                            (REWRITE "lcoset_iff_coset" :DIR
                                             RL)
                                            (("1" (EXPAND "left_coset?")
                                              (("1" (INST 1 "a")
                                                (("1" (HIDE-ALL-BUT 1)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REPLACES -1)
                                            (("2" (PROP)
                                              (("2"
                                                (CASE-REPLACE
                                                 "(a * a + nZ(p)) = product(Z,nZ(p))(a+nZ(p), a+nZ(p))")
                                                (("1" (REPLACES -2)
                                                  (("1" (HIDE -1)
                                                    (("1"
                                                      (LEMMA "product_charac")
                                                      (("1"
                                                        (INST -1 "Z" "nZ(p)"
                                                         "0" "0")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REWRITE*
                                                             "left_zero")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE-ALL-BUT 1)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (REWRITE "product_charac")
                                                  (("2" (HIDE-ALL-BUT 1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3"
                                                  (REWRITE "lcoset_iff_coset"
                                                   :DIR RL)
                                                  (("3" (EXPAND "left_coset?")
                                                    (("3" (INST 1 "a")
                                                      (("3" (HIDE-ALL-BUT 1)
                                                        (("3" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|restrict| CONST-DECL "R" |restrict| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|a| SKOLEM-CONST-DECL "int" |nz_zprime_group| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|Z_sq| CONST-DECL
     "set[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                        nZ(p))]"
     |nz_zprime_group| NIL)
    (|nz_coset_zsq| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|prime_gt_1| FORMULA-DECL NIL |primes| |ints|)
    (|homomorphism?| CONST-DECL "bool" |homomorphisms| |algebra|))
   NIL))
 (|kernel_homo_Zp_Zpsq_TCC1| 0
  (|kernel_homo_Zp_Zpsq_TCC1-2| NIL 3932721756
   ("" (SKEEP*)
    (("" (SPLIT)
      (("1" (SKEEP)
        (("1" (EXPAND "restrict")
          (("1" (EXPAND "remove")
            (("1" (EXPAND "member")
              (("1" (EXPAND "Z")
                (("1" (EXPAND "/") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP)
        (("2" (EXPAND "restrict")
          (("2" (TYPEPRED "x1")
            (("2" (PROP)
              (("2" (EXPAND "coset?")
                (("2" (FLATTEN)
                  (("2" (HIDE -2)
                    (("2" (EXPAND "left_coset?")
                      (("2" (SKEEP)
                        (("2" (CASE-REPLACE "phi(x1) = a * a + nZ(p)")
                          (("1" (CASE "divides(p, a* a)")
                            (("1" (LEMMA "prime_divides_prod")
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (INST?)
                                    (("1" (ASSERT)
                                      (("1" (PROP)
                                        (("1" (HIDE-ALL-BUT (-1 -4 1))
                                          (("1" (LEMMA "equal_cosets_div")
                                            (("1" (INST -1 "0" "a" "p")
                                              (("1" (REWRITE "left_zero")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE-ALL-BUT (-1 -4 1))
                                          (("2" (LEMMA "equal_cosets_div")
                                            (("2" (INST -1 "0" "a" "p")
                                              (("2" (REWRITE "left_zero")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (-3 1))
                              (("2" (LEMMA "equal_cosets_div")
                                (("2" (INST -1 "0" "a* a" "p")
                                  (("2" (REWRITE "left_zero")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REPLACE -3 1)
                            (("2" (BETA)
                              (("2" (REPLACES -1)
                                (("2" (REWRITE "product_charac")
                                  (("2" (REWRITE "nZ_ideal") NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (LEMMA "surj_homo_Zp_Zpsq")
        (("3" (BETA)
          (("3" (FLATTEN)
            (("3" (HIDE -2)
              (("3" (EXPAND "homomorphism?")
                (("3" (SKEEP)
                  (("3" (INST -1 "a" "b")
                    (("3" (EXPAND "restrict")
                      (("3" (REPLACES -2)
                        (("3" (BETA) (("3" (PROPAX) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|surj_homo_Zp_Zpsq| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|homomorphism?| CONST-DECL "bool" |homomorphisms| |algebra|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|left_zero| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|prime_divides_prod| FORMULA-DECL NIL |primes| |ints|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|nz_coset_zsq| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (|Z_sq| CONST-DECL
     "set[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                        nZ(p))]"
     |nz_zprime_group| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|remove| CONST-DECL "set" |sets| NIL)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL))
   NIL
   (|kernel_homo_Zp_Zpsq| SUBTYPE "nz_zprime_group.phi"
    "homomorphism[nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p))](restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p))), restrict[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), bool].restrict(sets[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))].remove(ring_zn.nZ(nz_zprime_group.p), nz_zprime_group.Z_sq(nz_zprime_group.p))))"))
  (|kernel_homo_Zp_Zpsq_TCC1-1| NIL 3932713073 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|kernel_homo_Zp_Zpsq| SUBTYPE "nz_zprime_group.phi"
    "homomorphism[nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), restrict[[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))], [nz_coset(nz_zprime_group.p), nz_coset(nz_zprime_group.p)], set[int]].restrict(product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))), (cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].+)(1, ring_zn.nZ(nz_zprime_group.p))](restrict[set[int], nz_coset(nz_zprime_group.p), bool].restrict(sets[set[int]].remove(ring_zn.nZ(nz_zprime_group.p), ring_zn.Z(nz_zprime_group.p))), restrict[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p)), nz_coset(nz_zprime_group.p), bool].restrict(sets[coset[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)](ring_zn.Z, ring_zn.nZ(nz_zprime_group.p))].remove(ring_zn.nZ(nz_zprime_group.p), nz_zprime_group.Z_sq(nz_zprime_group.p))))")))
 (|kernel_homo_Zp_Zpsq| 0
  (|kernel_homo_Zp_Zpsq-1| NIL 3932722165
   (""
    (STOP-REWRITE "right_identity" "left_identity" "one_left" "one_right"
     "zero_plus" "plus_zero")
    (("" (BETA)
      (("" (DECOMPOSE-EQUALITY)
        (("1" (IFF)
          (("1" (PROP)
            (("1" (EXPAND "kernel")
              (("1" (EXPAND "restrict")
                (("1" (TYPEPRED "x!1")
                  (("1" (EXPAND "remove")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "member")
                        (("1" (EXPAND "coset?")
                          (("1" (EXPAND "left_coset?")
                            (("1" (FLATTEN)
                              (("1" (SKEEP)
                                (("1" (REPLACES -1)
                                  (("1" (REWRITE "product_charac")
                                    (("1" (LEMMA "eq_cos_inv[int,+,*,0]")
                                      (("1" (INST -1 "Z" "a*a" "1" "nZ(p)")
                                        (("1" (ASSERT)
                                          (("1"
                                            (CASE-REPLACE
                                             "(inv(1)) + a * a = (a - 1) * (a + 1)")
                                            (("1" (HIDE -1)
                                              (("1" (LEMMA "product_charac")
                                                (("1"
                                                  (INST -1 "Z" "nZ(p)" "a - 1"
                                                   "a+1")
                                                  (("1" (REPLACE -1 -2 RL)
                                                    (("1" (HIDE -1)
                                                      (("1"
                                                        (LEMMA
                                                         "Zp_nz_is_group")
                                                        (("1" (EXPAND "group?")
                                                          (("1"
                                                            (EXPAND "monoid?")
                                                            (("1"
                                                              (EXPAND "monad?")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (HIDE -2 -3
                                                                   -4 -5)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "star_closed?")
                                                                    (("1"
                                                                      (INST -1
                                                                       "a - 1 + nZ(p)"
                                                                       "a + 1 + nZ(p)")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "member")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "restrict")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "remove")
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (EXPAND
                                                                         "restrict")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "remove")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "member")
                                                                            (("2"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (HIDE
                                                                                 3)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "eq_cos_inv2[int,+,*,0]")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "Z"
                                                                                     "a"
                                                                                     "1"
                                                                                     "nZ(p)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (CASE-REPLACE
                                                                                         "inv(1) + nZ(p) = (p - 1) + nZ(p)")
                                                                                        (("1"
                                                                                          (HIDE
                                                                                           -2
                                                                                           2
                                                                                           3)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "equal_cosets_div")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "inv(1)"
                                                                                               "p-1"
                                                                                               "p")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (CASE-REPLACE
                                                                                                   "-1 - inv(1) = 0")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "divides")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "1")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (HIDE-ALL-BUT
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (REWRITE
                                                                                       "nZ_ideal")
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (LEMMA
                                                                                 "eq_cos_inv2[int,+,*,0]")
                                                                                (("2"
                                                                                  (PROP)
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "Z"
                                                                                     "a"
                                                                                     "1"
                                                                                     "nZ(p)")
                                                                                    (("1"
                                                                                      (CASE-REPLACE
                                                                                       "a+1  = 1+a")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (CASE-REPLACE
                                                                                           "inv(1) + nZ(p) = (p - 1) + nZ(p)")
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "equal_cosets_div")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "inv(1)"
                                                                                               "p-1"
                                                                                               "p")
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (CASE-REPLACE
                                                                                                   " -1 - inv(1) = 0")
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "divides")
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "1")
                                                                                                      (("1"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (GRIND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (REWRITE
                                                                                       "nZ_ideal")
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("3"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (EXPAND
                                                                                 "Z")
                                                                                (("3"
                                                                                  (EXPAND
                                                                                   "/"
                                                                                   1)
                                                                                  (("3"
                                                                                    (REWRITE
                                                                                     "lcoset_iff_coset"
                                                                                     :DIR
                                                                                     RL)
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "left_coset?")
                                                                                      (("3"
                                                                                        (INST
                                                                                         1
                                                                                         "1+a")
                                                                                        (("3"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (EXPAND
                                                                         "restrict")
                                                                        (("3"
                                                                          (EXPAND
                                                                           "remove")
                                                                          (("3"
                                                                            (EXPAND
                                                                             "member")
                                                                            (("3"
                                                                              (CASE
                                                                                  "(
+[int, restrict[[numfield, numfield], [int, int], numfield](+)])(a - 1, nZ(p))
       /= nZ(p)")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "Z"
                                                                                   1)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "/"
                                                                                     1)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "lcoset_iff_coset"
                                                                                       :DIR
                                                                                       RL)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "left_coset?")
                                                                                        (("1"
                                                                                          (INST
                                                                                           1
                                                                                           "a-1")
                                                                                          (("1"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (HIDE
                                                                                 2)
                                                                                (("2"
                                                                                  (PROP)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "eq_cos_inv2[int,+,*,0]")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -1
                                                                                       "Z"
                                                                                       "a"
                                                                                       "-1"
                                                                                       "nZ(p)")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REWRITE
                                                                                         "nZ_ideal")
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (HIDE-ALL-BUT
                                                                                 1)
                                                                                (("3"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL)
                                                   ("3" (HIDE-ALL-BUT 1)
                                                    (("3" (GRIND) NIL NIL))
                                                    NIL)
                                                   ("4" (REWRITE "nZ_ideal")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT 1)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (REWRITE "nZ_ideal") NIL NIL)
                                         ("3" (HIDE-ALL-BUT 1)
                                          (("3" (GRIND) NIL NIL)) NIL)
                                         ("4" (HIDE-ALL-BUT 1)
                                          (("4" (GRIND) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (HIDE-ALL-BUT 1)
                                        (("2"
                                          (LEMMA "Z_commutative_ring_w_one")
                                          (("2"
                                            (EXPAND
                                             "commutative_ring_with_one?")
                                            (("2" (EXPAND "Z")
                                              (("2" (FLATTEN)
                                                (("2" (EXPAND "ring_with_one?")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "nZ_ideal") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "kernel")
              (("2" (EXPAND "restrict")
                (("2" (EXPAND "remove")
                  (("2" (EXPAND "member")
                    (("2" (REPLACES -1)
                      (("2" (SPLIT)
                        (("1" (EXPAND "Z")
                          (("1" (EXPAND "/")
                            (("1" (REWRITE "lcoset_iff_coset" :DIR RL)
                              (("1" (EXPAND "left_coset?")
                                (("1" (INST 1 "p-1") (("1" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "product_charac")
                          (("1" (REWRITE "equal_cosets_div")
                            (("1" (EXPAND "divides")
                              (("1" (INST 1 "2 - p") (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL)
                           ("3" (REWRITE "nZ_ideal") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "kernel")
              (("3" (EXPAND "restrict")
                (("3" (EXPAND "remove")
                  (("3" (EXPAND "member")
                    (("3" (REPLACES -1)
                      (("3" (SPLIT)
                        (("1" (EXPAND "Z")
                          (("1" (EXPAND "/")
                            (("1" (REWRITE "lcoset_iff_coset" :DIR RL)
                              (("1" (EXPAND "left_coset?")
                                (("1" (INST 1 "1") (("1" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (REWRITE "product_charac")
                          (("1" (GRIND) NIL NIL)
                           ("2" (REWRITE "nZ_ideal") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REWRITE "one_dif_zero_cos")
          (("2" (REWRITE "lcoset_iff_coset" :DIR RL)
            (("2" (EXPAND "left_coset?")
              (("2" (INST 1 "1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (SPLIT)
            (("1" (REWRITE "lcoset_iff_coset" :DIR RL)
              (("1" (EXPAND "left_coset?")
                (("1" (TYPEPRED "x1`1" "x1`2")
                  (("1" (EXPAND "coset?")
                    (("1" (EXPAND "left_coset?")
                      (("1" (FLATTEN)
                        (("1" (SKEEP*)
                          (("1" (INST 3 "a*a!1")
                            (("1" (REWRITE "product_charac" :DIR RL)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (REWRITE "nz_ideal") NIL NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROP)
              (("2" (LEMMA " Zp_nz_is_group")
                (("2" (EXPAND "group?")
                  (("2" (EXPAND "monoid?")
                    (("2" (EXPAND "monad?")
                      (("2" (FLATTEN)
                        (("2" (HIDE-ALL-BUT (-1 -6))
                          (("2" (EXPAND "star_closed?")
                            (("2" (INST -1 "x1`1" "x1`2")
                              (("1" (EXPAND "member")
                                (("1" (EXPAND "restrict")
                                  (("1" (EXPAND "remove")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "restrict")
                                (("2" (EXPAND "remove")
                                  (("2" (EXPAND "member")
                                    (("2" (TYPEPRED "x1`2")
                                      (("2" (EXPAND "Z" 1)
                                        (("2" (EXPAND "/" 1)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (EXPAND "restrict")
                                (("3" (EXPAND "remove")
                                  (("3" (EXPAND "member")
                                    (("3" (EXPAND "Z")
                                      (("3" (EXPAND "/")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (LEMMA "surj_homo_Zp_Zpsq")
          (("4" (BETA)
            (("4" (ASSERT)
              (("4" (FLATTEN)
                (("4" (ASSERT) (("4" (HIDE -2) (("4" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (GRIND) NIL NIL)
         ("6" (EXPAND "restrict")
          (("6" (EXPAND "remove")
            (("6" (EXPAND "member")
              (("6" (SKEEP)
                (("6"
                  (CASE "product
           [int, restrict[[numfield, numfield], [int, int], numfield](+),
            restrict[[numfield, numfield], [int, int], numfield](*)]
           (Z, nZ(p))(x, x)
        /= nZ(p)")
                  (("1" (ASSERT)
                    (("1" (SPLIT)
                      (("1" (REWRITE "lcoset_iff_coset" :DIR RL)
                        (("1" (EXPAND "left_coset?")
                          (("1" (TYPEPRED "x")
                            (("1" (EXPAND "coset?")
                              (("1" (EXPAND "left_coset?")
                                (("1" (FLATTEN)
                                  (("1" (SKEEP)
                                    (("1" (INST 2 "a*a")
                                      (("1" (REWRITE "product_charac" :DIR RL)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (REWRITE "nZ_ideal") NIL NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "Z_sq")
                        (("2" (HIDE -)
                          (("2" (TYPEPRED "x")
                            (("2" (EXPAND "coset?")
                              (("2" (EXPAND "left_coset?")
                                (("2" (FLATTEN)
                                  (("2" (SKEEP)
                                    (("2" (INST 2 "a")
                                      (("2" (REPLACES -1)
                                        (("2" (REWRITE "product_charac")
                                          (("2" (REWRITE "nZ_ideal") NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (TYPEPRED "x")
                      (("2" (LEMMA "Zp_nz_is_group")
                        (("2" (EXPAND "group?")
                          (("2" (EXPAND "monoid?")
                            (("2" (EXPAND "monad?")
                              (("2" (FLATTEN)
                                (("2" (HIDE-ALL-BUT (-1 -6 -7 1))
                                  (("2" (EXPAND "star_closed?")
                                    (("2" (INST -1 "x" "x")
                                      (("1" (EXPAND "member")
                                        (("1" (EXPAND "restrict")
                                          (("1" (EXPAND "remove")
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "restrict")
                                        (("2" (EXPAND "remove")
                                          (("2" (EXPAND "member")
                                            (("2" (EXPAND "Z")
                                              (("2" (EXPAND "/")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ring?| CONST-DECL "bool" |ring_def| |algebra|)
    (|ring| NONEMPTY-TYPE-EQ-DECL NIL |ring| |algebra|)
    (Z CONST-DECL
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     |ring_zn| |algebra_examples|)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nZ| CONST-DECL "set[int]" |ring_zn| |algebra_examples|)
    (|prime?| CONST-DECL "bool" |primes| |ints|)
    (|p| FORMAL-CONST-DECL "(prime?)" |nz_zprime_group| NIL)
    (|coset| TYPE-EQ-DECL NIL |cosets_def| |algebra|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nz_coset| TYPE-EQ-DECL NIL |nz_zprime_group| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|kernel| CONST-DECL "subgroup[T1, *, one1](G)" |homomorphisms| |algebra|)
    (|subgroup| TYPE-EQ-DECL NIL |group| |algebra|)
    (|subgroup?| CONST-DECL "bool" |group_def| |algebra|)
    (|homomorphism| TYPE-EQ-DECL NIL |homomorphisms| |algebra|)
    (+ CONST-DECL "set[T]" |cosets_def| |algebra|)
    (|group| NONEMPTY-TYPE-EQ-DECL NIL |group| |algebra|)
    (|group?| CONST-DECL "bool" |group_def| |algebra|)
    (|homomorphism?| CONST-DECL "bool" |homomorphisms| |algebra|)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (Z CONST-DECL "setofsets[int]" |ring_zn| |algebra_examples|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|product| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|Z_sq| CONST-DECL
     "set[coset[int, restrict[[numfield, numfield], [int, int], numfield](+)](Z,
                                                                        nZ(p))]"
     |nz_zprime_group| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|left_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|product_charac| FORMULA-DECL NIL |quotient_rings| |algebra|)
    (|ideal?| CONST-DECL "bool" |ring_ideal_def| |algebra|)
    (|ideal| TYPE-EQ-DECL NIL |ring_ideal_def| |algebra|)
    (|commutative_ring_with_one?| CONST-DECL "bool" |ring_with_one_def|
     |algebra|)
    (|ring_with_one?| CONST-DECL "bool" |ring_with_one_def| |algebra|)
    (|Z_commutative_ring_w_one| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|a| SKOLEM-CONST-DECL "(Z)" |nz_zprime_group| NIL)
    (|inv| CONST-DECL "{y | x * y = one AND y * x = one}" |group| |algebra|)
    (|Zp_nz_is_group| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|monoid?| CONST-DECL "bool" |monoid_def| |algebra|)
    (|star_closed?| CONST-DECL "bool" |groupoid_def| |algebra|)
    (|lcoset_iff_coset| FORMULA-DECL NIL |ring_cosets_lemmas| |algebra|)
    (/ CONST-DECL "setof[set[T]]" |cosets_def| |algebra|)
    (|equal_cosets_div| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|divides| CONST-DECL "bool" |divides| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nZ_ideal| FORMULA-DECL NIL |ring_zn| |algebra_examples|)
    (|eq_cos_inv2| FORMULA-DECL NIL |ring_cosets_lemmas_extras| NIL)
    (|monad?| CONST-DECL "bool" |monad_def| |algebra|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|eq_cos_inv| FORMULA-DECL NIL |ring_cosets_lemmas_extras| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|one_dif_zero_cos| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|a!1| SKOLEM-CONST-DECL "(Z)" |nz_zprime_group| NIL)
    (|a| SKOLEM-CONST-DECL "(Z)" |nz_zprime_group| NIL)
    (|x1| SKOLEM-CONST-DECL "[nz_coset(p), nz_coset(p)]" |nz_zprime_group| NIL)
    (|lc_gen| CONST-DECL "T" |cosets_def| |algebra|)
    (|lproduct| CONST-DECL "set[T]" |product_coset_def| |algebra|)
    (|surj_homo_Zp_Zpsq| FORMULA-DECL NIL |nz_zprime_group| NIL)
    (|right_coset?| CONST-DECL "bool" |cosets_def| |algebra|)
    (|x| SKOLEM-CONST-DECL "nz_coset(p)" |nz_zprime_group| NIL)
    (|a| SKOLEM-CONST-DECL "(Z)" |nz_zprime_group| NIL))
   NIL))
 (|card_ker_Zp_Zpsq_TCC1| 0
  (|card_ker_Zp_Zpsq_TCC1-2| NIL 3932721797
   ("" (SKEEP) (("" (LEMMA "finite_ker_Zp_Zpsq") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|finite_ker_Zp_Zpsq| FORMULA-DECL NIL |nz_zprime_group| NIL)) NIL
   (|card_ker_Zp_Zpsq| SUBTYPE "nz_zprime_group.ker_phi"
    "finite_set[nz_coset(p)]"))
  (|card_ker_Zp_Zpsq_TCC1-1| NIL 3932713073
   ("" (SKEEP) (("" (LEMMA "finite_ker_Zp_Zpsq") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|finite_ker_Zp_Zpsq| FORMULA-DECL NIL |nz_zprime_group| NIL)) NIL
   (|card_ker_Zp_Zpsq| SUBTYPE "nz_zprime_group.ker_phi"
    "finite_set[nz_coset(p)]"))))

